VAULT SIDE CAR PROJECT:

configure_vault_sidecar.sh Script:
"
```shellscript
#!/bin/bash

# Script Name: configure_vault_sidecar.sh
# Author: Juan Monge
# Description: Configuring Kubernetes Authentication with Vault and integrating Vault Sidecar Injector

export VAULT_ADDR='https://hcvault-sandbox.llm-aws.com:8200/'

# Step 1: Obtain Kubernetes Information
get_kubernetes_api_server_url() {
    kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'
}

export KUBERNETES_HOST=$(get_kubernetes_api_server_url)
kubectl get configmap -n kube-system extension-apiserver-authentication -o=jsonpath='{.data.client-ca-file}' > ~/ca.crt

# Step 2: Create a Kubernetes Service Account
NAMESPACE="default" # Replace with the desired namespace
create_service_account() {
    kubectl create serviceaccount vault-auth -n $NAMESPACE || echo "Service account 'vault-auth' already exists. Continuing..."
}

if ! create_service_account; then
  echo "Failed to create service account. Exiting."
  exit 1
fi

# Step 3: Configure Kubernetes Authentication in Vault
get_token_reviewer_jwt() {
    kubectl get secret $(kubectl get serviceaccount vault-auth -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode
}

configure_kubernetes_authentication() {
    local token_reviewer_jwt="$1"
    local kubernetes_host="$2"
    local ca_cert_file="$3"

    vault write auth/kubernetes/config \
        token_reviewer_jwt="$token_reviewer_jwt" \
        kubernetes_host="$kubernetes_host" \
        kubernetes_ca_cert=@"$ca_cert_file"
}

TOKEN_REVIEWER_JWT=$(get_token_reviewer_jwt)
configure_kubernetes_authentication "$TOKEN_REVIEWER_JWT" "$KUBERNETES_HOST" "$HOME/ca.crt"

# Step 4: Create a Vault Policy
POLICY_NAME="juan-web-poc-policy"
VAULT_POLICY_FILE="./assets/$POLICY_NAME.hcl"

if [ ! -f "$VAULT_POLICY_FILE" ]; then
  echo "Vault policy file not found at $VAULT_POLICY_FILE. Exiting."
  exit 1
fi

create_vault_policy() {
    local policy_name="$1"
    local vault_policy_file="$2"

    echo "path \"devops/kv/vault-templating-poc/*\" { capabilities = [\"read\"] }" > "$vault_policy_file"
    vault policy write "$policy_name" - <<EOF
$(cat "$vault_policy_file")
EOF
}

create_vault_policy "$POLICY_NAME" "$VAULT_POLICY_FILE"

# Step 5: Create a Role in Vault
ROLE_NAME="juan-web-poc-role"

create_vault_role() {
    local role_name="$1"
    local bound_service_account_names="$2"
    local bound_service_account_namespaces="$3"
    local policies="$4"
    local ttl="$5"

    vault write auth/kubernetes/role/"$role_name" \
        bound_service_account_names="$bound_service_account_names" \
        bound_service_account_namespaces="$bound_service_account_namespaces" \
        policies="$policies" \
        ttl="$ttl"
}

create_vault_role "$ROLE_NAME" "vault-auth" "$NAMESPACE" "$POLICY_NAME" "24h"

# Step 6: Conclusion
if [ $? -eq 0 ]; then
    echo "--------------------------------------------------"
    echo "Configuration and Integration Completed Successfully!"
    echo "--------------------------------------------------"
    echo "Here's what has been configured and integrated:"
    echo "1. Kubernetes API Server URL and CA certificate have been obtained."
    echo "2. A Kubernetes service account named 'vault-auth' has been created."
    echo "3. Kubernetes authentication has been configured in Vault."
    echo "4. A Vault policy named '$POLICY_NAME' has been created."
    echo "5. A Vault role named '$ROLE_NAME' has been created and bound to the service account."
    echo ""
    echo "Next Steps:"
    echo "1. Verify the integration by checking the logs from the Vault sidecar container in your Kubernetes application."
    echo "2. Run the Helm installation of the injector: deploy-vault-helm.sh."
    echo "--------------------------------------------------"
else
    echo "An error occurred during the configuration. Please check the logs for details."
fi

# Additional Feature: Install Vault CLI if not already installed
install_vault_cli() {
    if ! command -v vault &> /dev/null; then
        echo "Vault CLI is not installed. Installing..."
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
        echo "deb
"
web-app-deployment.yaml:
"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "juan-web-poc-role"
        vault.hashicorp.com/agent-inject-secret-appconfigs.json: "devops/kv/vault-templating-poc"
        vault.hashicorp.com/agent-template-configmap: "web-app-vault-template-configmap"
        vault.hashicorp.com/agent-template-file: "appconfigs.json.tpl"
        vault.hashicorp.com/agent-inject-template-file: "/app/configs/appconfigs.json"
        vault.hashicorp.com/agent-template-wait-min: "15s"
        vault.hashicorp.com/agent-template-wait-max: "5m"
    spec:
      serviceAccountName: vault-auth
      containers:
        - name: web-app
          image: bacus/webjsvaultproject:latest
          ports:
            - containerPort: 3001
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "500m"
              memory: "256Mi"
"

web-app-deployment.yaml FILE:
"
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-vault-template-configmap
data:
  appconfigs.json.tpl: |
    {{- with secret "devops/kv/vault-templating-poc" -}}
    {
      "value1": "{{ .Data.data.hello }}",
      "value2": "{{ .Data.data.name }}",
      "value3": "{{ .Data.data.age }}",
      "value4": "{{ .Data.data.country }}",
      "value5": "{{ .Data.data.message }}",
      "value6": "hardcoded value in ctmpl",
      "value7": "hardcoded value in ctmpl",
      "value8": "hardcoded value in ctmpl"
    }
    {{- end }}
"

LOGS:

jmonge@IT-JMONGE deployments % kubectl describe pod web-app-5786fcd48b-sjxq5
Name:             web-app-5786fcd48b-sjxq5
Namespace:        default
Priority:         0
Service Account:  vault-auth
Node:             docker-desktop/192.168.65.4
Start Time:       Sat, 26 Aug 2023 20:32:07 -0600
Labels:           app=web-app
                  pod-template-hash=5786fcd48b
Annotations:      vault.hashicorp.com/agent-inject: true
                  vault.hashicorp.com/agent-inject-secret-appconfigs.json: devops/kv/vault-templating-poc
                  vault.hashicorp.com/agent-inject-template-file: /app/configs/appconfigs.json
                  vault.hashicorp.com/agent-template-configmap: web-app-vault-template-configmap
                  vault.hashicorp.com/agent-template-file: appconfigs.json.tpl
                  vault.hashicorp.com/agent-template-wait-max: 5m
                  vault.hashicorp.com/agent-template-wait-min: 15s
                  vault.hashicorp.com/role: juan-web-poc-role
Status:           Running
IP:               10.1.0.35
IPs:
  IP:           10.1.0.35
Controlled By:  ReplicaSet/web-app-5786fcd48b
Containers:
  web-app:
    Container ID:   docker://677bc72adbc134c8b14cc94c664cf64d7b3428fbfcedbe908a815bc9ab220ac4
    Image:          bacus/webjsvaultproject:latest
    Image ID:       docker-pullable://bacus/webjsvaultproject@sha256:7b2c9ae3a2dea6104bf9eb9a06c0bcb6095362d15a27ab93a57e98046e83a9bd
    Port:           3001/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sat, 26 Aug 2023 20:32:09 -0600
    Ready:          True
    Restart Count:  0
    Limits:
      cpu:     1
      memory:  512Mi
    Requests:
      cpu:        500m
      memory:     256Mi
    Environment:  <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-mtnp6 (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  kube-api-access-mtnp6:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  2m13s  default-scheduler  Successfully assigned default/web-app-5786fcd48b-sjxq5 to docker-desktop
  Normal  Pulling    2m12s  kubelet            Pulling image "bacus/webjsvaultproject:latest"
  Normal  Pulled     2m11s  kubelet            Successfully pulled image "bacus/webjsvaultproject:latest" in 1.352010626s (1.352040959s including waiting)
  Normal  Created    2m11s  kubelet            Created container web-app
  Normal  Started    2m11s  kubelet            Started container web-app
jmonge@IT-JMONGE deployments % 

deploy-vault-helm.sh Script:

"
#!/bin/bash

VAULT_VALUES_FILE="vault-values.yaml"
VAULT_HELM_RELEASE="vault"
NAMESPACE="default"

# Function to add and update the HashiCorp Helm Repository
add_update_helm_repo() {
  echo "Adding and updating HashiCorp Helm Repository..."
  helm repo list | grep "hashicorp" &> /dev/null
  if [ $? -ne 0 ]; then
    helm repo add hashicorp https://helm.releases.hashicorp.com
  fi
  helm repo update
}

# Function to check Vault Helm installation status
check_installation_status() {
  echo "Checking Vault Helm installation status..."
  helm status $VAULT_HELM_RELEASE -n $NAMESPACE &> /dev/null
  if [ $? -ne 0 ]; then
    echo "Error: Vault Helm installation not found or not healthy."
    return 1
  fi
  return 0
}

# Function to deploy Vault Helm
deploy_vault_helm() {
  echo "Deploying Vault Helm..."
  helm install $VAULT_HELM_RELEASE hashicorp/vault -f $VAULT_VALUES_FILE -n $NAMESPACE
  if [ $? -ne 0 ]; then
    echo "Error: Failed to install Vault Helm release."
    exit 1
  fi
}

# Function to redeploy Vault Helm
redeploy_vault_helm() {
  read -p "Do you want to redeploy Vault Helm? [y/N]: " decision
  if [[ "$decision" == "y" || "$decision" == "Y" ]]; then
    echo "Redeploying Vault Helm..."
    helm uninstall $VAULT_HELM_RELEASE -n $NAMESPACE
    deploy_vault_helm
    echo "Redeployment completed."
  else
    echo "Redeployment skipped."
  fi
}

# Main script execution
echo "Starting Vault Helm Deployment Verification..."
add_update_helm_repo

if check_installation_status; then
  echo "Vault Helm installation is healthy."
else
  echo "Issues detected with Vault Helm installation."
  redeploy_vault_helm
fi

# Verification Step
echo "Verifying Vault Sidecar Integration..."
POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=web-app -o jsonpath='{.items[0].metadata.name}')

if [ -z "$POD_NAME" ]; then
  echo "Error: Unable to find the appropriate pod for verification."
  exit 1
fi

echo "Retrieving logs from the Vault sidecar container..."
kubectl logs $POD_NAME -c vault-agent -n $NAMESPACE

echo "Verification completed. Check the logs above for details."
echo "You've successfully integrated the Vault sidecar injector into your Kubernetes application."

# Conclusion
echo "Your application can now securely access secrets stored in HashiCorp Vault."

# Conclusion Step
echo "--------------------------------------------------"
echo "Vault Helm Deployment Completed Successfully!"
echo "--------------------------------------------------"
echo "Here's what has been done:"
echo "1. HashiCorp Helm repository has been added and updated."
echo "2. Checked the status of the existing Vault Helm installation."
echo "3. Deployed or redeployed the Vault Helm release based on the provided values file."
echo ""
echo "Next Steps:"
echo "1. Verify the Vault Helm deployment by running 'helm status $VAULT_HELM_RELEASE' to ensure the Vault server injector is deployed correctly."
echo "2. Check if the Vault injector has its own pod running by using 'kubectl get pods -n <namespace>' and looking for the injector pod."
echo "3. Confirm that the web-app pod has Vault initialization inside by inspecting the logs or metadata of the web-app pod using 'kubectl logs <web-app-pod-name> -n <namespace>' or 'kubectl describe pod <web-app-pod-name> -n <namespace>'."
"

vault-values.yaml fiLe:
"
server:
  enabled: false
injector:
  enabled: true
global:
  vault:
    address: https://hcvault-sandbox.llm-aws.com:8200/
"